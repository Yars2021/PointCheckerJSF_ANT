<project name="PointCheckerJSF" default="build" basedir=".">
	<description>
		Apache ANT build for PointChecker JSF
	</description>
	<property file="build.properties" />

	<path id="project.class.path">
		<fileset dir="lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="junit.class.path">
		<fileset dir="junit">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="init">
 		<tstamp/>
 		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init" description="compile the source">
		<javac srcdir="${src}" destdir="${build}" source="1.8" includeantruntime="false">
			<classpath refid="project.class.path" />
		</javac>
	</target>

	<target name="build" depends="compile" description="build distributive">
		<copy todir="${dist}">
			<fileset dir="${webapp}" includes="**/**" />
		</copy>
		<copy todir="${dist}/WEB-INF/classes">
			<fileset dir="${build}" includes="**/**" />
		</copy>
		<copy todir="${dist}/WEB-INF/classes">
			<fileset dir="${resources}" includes="**/**" />
		</copy>
		<copy todir="${dist}/WEB-INF/lib">
			<path refid="project.class.path" />
		</copy>
		<!--jar jarfile="${dist}/lib/${artifact}-${DSTAMP}.jar" basedir="${build}" /-->
		<jar destfile="${jar}/PointCheckerJSF.jar" basedir="${build}" compress="false" index="true">
            <manifest>
                <attribute name="Main-Class" value="Main" />
				<attribute name="Version" value="0.1.3-SNAPSHOT" />
            </manifest>
        </jar>
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete dir="${test_build}" />
		<delete dir="${dist}" />
	</target>

	<target name="test" depends="build" description="Run JUnit tests">
		<mkdir dir="${test_build}" />

		<javac srcdir="${t_src}" destdir="${test_build}" source="1.8" includeantruntime="false">
			<classpath refid="project.class.path" />
			<classpath refid="junit.class.path" />
			<classpath location="${build}" />		
		</javac>

		<junit haltonfailure="${test.haltonfailure}" printsummary="${test.printsummary}">
			<formatter type="plain" />
			<classpath refid="junit.class.path" />
			<classpath refid="project.class.path" />
			<classpath location="${build}" />
			<classpath location="${test_build}" />
			<batchtest fork="yes" todir="${test.report}">
				<fileset dir="${t_src}">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="xml" description="Validate all XML files">
		<xmlvalidate failonerror="${xml.failonerror}">
			<fileset dir="src" includes="**/*.xml" />
		</xmlvalidate>
	</target>
	
	<target name="commit" if="${git.commit}" description="Commits everything">
		<exec executable="git" dir=".">
			<arg value="add" />
			<arg value="./*" />
		</exec>
		
		<exec executable="git" dir=".">
			<arg value="commit" />
			<arg value="-m" />
			<arg value="Diff commit" />
		</exec>
	</target>
	
	<target name="diff" description="Checks the differences and commits">
		<exec executable="git" outputproperty="git.diff.res">
			<arg value="diff" />
			<arg value="--name-only" />
		</exec>
	
		<loadfile property="params.res" srcfile="params.txt" />
	
		<property name="git.commit" value="True" />
	
		<script language="javascript"> 
		<![CDATA[
			if (project.getProperty("git.diff.res") == null || project.getProperty("params.res") == null) {
				print("No files found in params or git diff result")
				project.setProperty("git.commit", "False")
			} else {
				diff_files = project.getProperty("git.diff.res").trim().split("\n")
				param_files = project.getProperty("params.res").trim().split("\n")
				
				for (i = 0; i < diff_files.length; i++) {
					diff_files[i] = diff_files[i].trim()
				}
				
				for (i = 0; i < param_files.length; i++) {
					param_files[i] = param_files[i].trim()
				}
				
				intersection = []
				
				for (i = 0; i < diff_files.length; i++) {
					for (j = 0; j < param_files.length; j++) {
						str = diff_files[i] + " ~ " + param_files[j]
						if (diff_files[i] == param_files[j]) {
							intersection.push(diff_files[i])
						}
					}
				}
				
				if (intersection.length > 0) {
					project.setProperty("git.commit", "False")
				} else {
					project.setProperty("git.commit", "True")
				}
			}
		]]> 
		</script>
		
		<!-- <echo message="${git.commit}" /> -->
		<antcall target="commit" />
	</target>
</project>